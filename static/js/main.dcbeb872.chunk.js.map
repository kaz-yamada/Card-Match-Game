{"version":3,"sources":["constants/index.js","components/Card.jsx","services/GameService.js","components/GameBoard.jsx","components/Banner.jsx","App.jsx","index.js"],"names":["CARD_SIZES","BASE_URL","GAME_STATUS","CARD_STATUS","useStyles","createUseStyles","card","padding","borderRadius","height","width","border","position","transition","transformStyle","margin","backfaceVisibility","selected","borderColor","transform","front","matched","back","top","left","Card","data","handleClick","index","useState","isLoaded","setIsLoaded","id","url","status","classes","isSelected","isMatched","className","classnames","onClick","data-testid","src","alt","onLoad","gameService","a","getRandomUrls","urls","deck","concat","length","pop","shuffledDeck","sort","Math","random","Promise","resolve","reject","fetchImages","page","apiUrl","fetch","res","json","urlArray","imageSet","Set","floor","urlList","size","ceil","DECK_SIZE","i","has","add","push","board","display","gridTemplateColumns","justifyItems","GameBoard","gameStatus","onGameUpdate","setDeck","isChecking","setIsChecking","firstCard","setFirstCard","secondCard","setSecondCard","faceUpCounter","setFaceUpCounter","flipCounter","useRef","startTime","Date","isMounted","checkPair","useCallback","first","second","newDeck","setTimeout","resetCards","current","newCount","newCard","toggleCard","flipAllCards","prevDeck","lastCard","Object","keys","find","key","remainder","checkGameFinished","filter","flips","time","initialiseGame","GameService","console","error","useEffect","entries","map","value","root","background","alignItems","button","Banner","onReset","results","header","textAlign","footer","fontFamily","App","setGameStatus","gameResults","setGameResults","handleStatusUpdate","newStatus","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcbeb872.chunk.js","sourcesContent":["export const CARD_SIZES = { width: 150, height: 250 };\nexport const DECK_SIZE = 15;\nexport const API_PAGE_SIZE = 10;\n\nexport const BASE_URL = \"https://picsum.photos\";\n\nexport const GAME_STATUS = {\n  IN_PROGRESS: \"IN_PROGRESS\",\n  LOADING: \"LOADING\",\n  CREATING: \"CREATING\",\n  CHECKING: \"CHECKING\",\n  RESETTING: \"RESETTING\",\n  FINISHED: \"FINISHED\"\n};\n\nexport const CARD_STATUS = {\n  SELECTED: \"SELECTED\",\n  MATCHED: \"MATCHED\",\n  HIDDEN: \"HIDDEN\"\n};\n","import React, { useState } from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport classnames from \"classnames\";\n\nimport { CARD_STATUS, CARD_SIZES } from \"../constants\";\n\nconst useStyles = createUseStyles({\n  card: {\n    padding: 5,\n    borderRadius: 5,\n    height: CARD_SIZES.height,\n    width: CARD_SIZES.width,\n    border: \"black 5px solid\",\n    position: \"relative\",\n    transition: \"all 0.4s linear\",\n    transformStyle: \"preserve-3d\",\n    margin: \"5px\",\n    \"& div\": {\n      position: \"absolute\",\n      backfaceVisibility: \"hidden\",\n    },\n  },\n  selected: {\n    borderColor: \"blue\",\n    transform: \"rotateY(180deg)\",\n  },\n  front: {\n    transform: \"rotateY(180deg)\",\n  },\n  matched: {\n    borderColor: \"green\",\n    transform: \"rotateY(180deg)\",\n  },\n  back: {\n    transform: \"rotateY(180deg)\",\n    top: \"25%\",\n    left: \"35%\",\n  },\n});\n\nconst Card = ({ data, handleClick, index }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const { id, url, status } = data;\n  const classes = useStyles();\n  const isSelected = status === CARD_STATUS.SELECTED;\n  const isMatched = status === CARD_STATUS.MATCHED;\n\n  const onCardClick = () => {\n    if (status === CARD_STATUS.HIDDEN) {\n      handleClick(index, id);\n    }\n  };\n\n  const handleImageLoad = () => {\n    setIsLoaded(true);\n  };\n\n  return (\n    <div\n      className={classnames(classes.card, {\n        [classes.selected]: isSelected,\n        [classes.matched]: isMatched,\n      })}\n      onClick={onCardClick}\n      data-testid=\"card-root\"\n    >\n      <div className={classes.front}>\n        <img src={url} alt=\"card\" onLoad={handleImageLoad} />\n      </div>\n      <div className={classes.back}>{!isLoaded && \"Loading\"}</div>\n    </div>\n  );\n};\n\nexport default Card;\n","import { CARD_STATUS, DECK_SIZE, CARD_SIZES, API_PAGE_SIZE, BASE_URL } from \"../constants\";\n\n/**\n * Create new game\n */\nconst gameService = async () => {\n  const urls = await getRandomUrls();\n  const deck = urls.concat(urls);\n\n  while (deck.length > DECK_SIZE) {\n    deck.pop();\n  }\n\n  const shuffledDeck = deck.sort(() => 0.5 - Math.random());\n\n  // return shuffledDeck;\n\n  return new Promise((resolve, reject) => {\n    resolve(shuffledDeck)\n  })\n};\n\nconst fetchImages = async (page) => {\n  const apiUrl = `${BASE_URL}/v2/list?page=${page}&limit=100`;\n  const res = await fetch(apiUrl);\n  const data = await res.json();\n\n  return data;\n}\n\nexport const getRandomUrls = async () => {\n  const urlArray = [];\n  const imageSet = new Set();\n  const page = Math.floor(Math.random() * API_PAGE_SIZE) + 1;\n  const urlList = await fetchImages(page);\n\n  // Randomly pick cards from list from API\n  while (imageSet.size < Math.ceil(DECK_SIZE / 2)) {\n    const i = Math.floor(Math.random() * urlList.length) + 1\n\n    if (urlList[i]) {\n      const { id } = urlList[i]\n\n      if (!imageSet.has(id)) {\n        imageSet.add(id)\n        urlArray.push({\n          id,\n          url: `${BASE_URL}/id/${id}/${CARD_SIZES.width}/${CARD_SIZES.height}`,\n          status: CARD_STATUS.HIDDEN,\n        });\n      }\n    }\n  }\n\n  return urlArray;\n};\n\nexport default gameService;\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport { createUseStyles } from \"react-jss\";\n\nimport Card from \"./Card\";\nimport GameService from \"../services/GameService\";\nimport { CARD_STATUS, GAME_STATUS, DECK_SIZE } from \"../constants\";\n\nconst DELAY = 800;\n\nconst useStyles = createUseStyles({\n  board: {\n    display: \"grid\",\n    gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n    justifyItems: \"center\",\n  },\n});\n\nconst GameBoard = ({ gameStatus, onGameUpdate }) => {\n  const [deck, setDeck] = useState({});\n  const [isChecking, setIsChecking] = useState(false);\n  const [firstCard, setFirstCard] = useState(null);\n  const [secondCard, setSecondCard] = useState(null);\n  const [faceUpCounter, setFaceUpCounter] = useState(0);\n\n  const flipCounter = useRef(0);\n  const startTime = useRef(new Date());\n  const isMounted = useRef(false);\n\n  const classes = useStyles();\n\n  /**\n   * Check if the flipped cards match\n   */\n  const checkPair = useCallback(() => {\n    if (firstCard && secondCard) {\n      const first = { ...deck[firstCard.index] };\n      const second = { ...deck[secondCard.index] };\n\n      if (firstCard.id === secondCard.id) {\n        first.status = CARD_STATUS.MATCHED;\n        second.status = CARD_STATUS.MATCHED;\n      } else {\n        first.status = CARD_STATUS.HIDDEN;\n        second.status = CARD_STATUS.HIDDEN;\n      }\n\n      const newDeck = {\n        ...deck,\n        [firstCard.index]: first,\n        [secondCard.index]: second,\n      };\n\n      setTimeout(() => {\n        setDeck(newDeck);\n      }, DELAY);\n\n      setTimeout(resetCards, DELAY);\n    }\n  }, [deck, firstCard, secondCard]);\n\n  const resetCards = () => {\n    setFirstCard(null);\n    setSecondCard(null);\n    setIsChecking(false);\n  };\n\n  /**\n   *\n   * @param {*} index\n   * @param {*} status\n   */\n  const toggleCard = (index, status) => {\n    const newDeck = { ...deck };\n    const newCard = { ...newDeck[index] };\n\n    newCard.status = status;\n    newDeck[index] = newCard;\n\n    setDeck(newDeck);\n  };\n\n  /**\n   *\n   * @param {*} index\n   * @param {*} id\n   */\n  const handleClick = (index, id) => {\n    if (isChecking) return;\n\n    flipCounter.current++;\n\n    if (faceUpCounter < 2) {\n      const newCount = faceUpCounter + 1;\n      const newCard = { index, id };\n      setFaceUpCounter(newCount);\n\n      if (newCount === 1) {\n        setFirstCard(newCard);\n      } else {\n        setSecondCard(newCard);\n        setIsChecking(true);\n      }\n\n      toggleCard(index, CARD_STATUS.SELECTED);\n    }\n  };\n\n  /**\n   * Find odd card out and flip it\n   */\n  const flipAllCards = useCallback(() => {\n    setDeck((prevDeck) => {\n      const lastCard = Object.keys(deck).find(\n        (key) => deck[key].status === CARD_STATUS.HIDDEN\n      );\n\n      if (lastCard) {\n        const remainder = { ...deck[lastCard], status: CARD_STATUS.SELECTED };\n\n        const newDeck = {\n          ...deck,\n          [lastCard]: remainder,\n        };\n\n        return newDeck;\n      }\n\n      return prevDeck;\n    });\n  }, [deck]);\n\n  /**\n   * Check if the all cards are matched and game is finished\n   */\n  const checkGameFinished = useCallback(() => {\n    if (faceUpCounter === 0) {\n      const matches = Object.keys(deck).filter(\n        (key) => deck[key].status === CARD_STATUS.MATCHED\n      );\n\n      // Game is finished\n      if (matches.length === DECK_SIZE - 1) {\n        onGameUpdate(GAME_STATUS.FINISHED, {\n          flips: flipCounter.current,\n          time: `${(new Date() - startTime.current) / 1000} seconds`,\n        });\n      }\n    } else if (faceUpCounter === 2) {\n      setFaceUpCounter(0);\n      checkPair();\n    }\n  }, [checkPair, deck, faceUpCounter, onGameUpdate, startTime]);\n\n  const initialiseGame = useCallback(async () => {\n    try {\n      const newDeck = await GameService();\n      setDeck(newDeck);\n      flipCounter.current = 0;\n      startTime.current = new Date();\n      onGameUpdate(GAME_STATUS.IN_PROGRESS);\n    } catch (error) {\n      console.error(error);\n    }\n  }, [onGameUpdate]);\n\n  /**\n   * Initial render\n   */\n  useEffect(() => {\n    isMounted.current = true;\n\n    if (isMounted.current && gameStatus === GAME_STATUS.CREATING) {\n      initialiseGame();\n    }\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, [gameStatus, initialiseGame]);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      switch (gameStatus) {\n        case GAME_STATUS.CREATING:\n          break;\n\n        case GAME_STATUS.IN_PROGRESS:\n          checkGameFinished();\n          break;\n\n        case GAME_STATUS.FINISHED:\n          flipAllCards();\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, [deck, checkGameFinished, flipAllCards, gameStatus, onGameUpdate]);\n\n  if (gameStatus === GAME_STATUS.LOADING) {\n    return <span>Loading...</span>;\n  }\n\n  return (\n    <>\n      <div data-testid=\"flip-counter\">Flips: {flipCounter.current}</div>\n      <div className={classes.board}>\n        {Object.entries(deck).map(([key, value]) => {\n          return (\n            <Card\n              key={key}\n              index={key}\n              data={value}\n              handleClick={handleClick}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default GameBoard;\n","import React from \"react\";\nimport { createUseStyles } from \"react-jss\";\nimport { GAME_STATUS } from \"../constants\";\n\nconst useStyles = createUseStyles({\n  root: {\n    position: \"fixed\",\n    display: \"grid\",\n    top: \"30%\",\n    left: \"25%\",\n    width: \"50%\",\n    height: 200,\n    background: \"aliceblue\",\n    justifyItems: \"center\",\n    alignItems: \"center\",\n  },\n  button: {\n    background: \"white\",\n    border: \"solid 1px black\",\n    padding: \"1em 2em\",\n  },\n});\n\nconst Banner = ({ onReset, results }) => {\n  const classes = useStyles();\n\n  const handleReset = () => {\n    onReset(GAME_STATUS.CREATING);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div>Congratulations, you've won!</div>\n      <div>\n        <div data-testid=\"flips\">\n          <b>Cards flipped:</b> {results.flips} times\n        </div>\n        <div data-testid=\"time\">\n          <b>Time taken:</b> {results.time}\n        </div>\n      </div>\n      <button className={classes.button} onClick={handleReset}>\n        Play Again\n      </button>\n    </div>\n  );\n};\n\nexport default Banner;\n","import React, { useState } from \"react\";\nimport { createUseStyles } from \"react-jss\";\n\nimport GameBoard from \"./components/GameBoard\";\nimport Banner from \"./components/Banner\";\n\nimport { GAME_STATUS } from \"./constants\";\n\nconst useStyles = createUseStyles({\n  header: {\n    textAlign: \"center\",\n  },\n  footer: {\n    textAlign: \"center\",\n  },\n  root: {\n    fontFamily: \"arial\",\n  },\n});\n\nconst App = () => {\n  const [gameStatus, setGameStatus] = useState(GAME_STATUS.CREATING);\n  const [gameResults, setGameResults] = useState({});\n\n  const classes = useStyles();\n\n  const handleStatusUpdate = (newStatus, results) => {\n    setGameStatus(newStatus);\n    if (newStatus === GAME_STATUS.FINISHED) {\n      setGameResults(results);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <header className={classes.header}>\n        <h1>Card Match Game</h1>\n      </header>\n      <div>\n        <GameBoard gameStatus={gameStatus} onGameUpdate={handleStatusUpdate} />\n        {gameStatus === GAME_STATUS.FINISHED && (\n          <Banner onReset={handleStatusUpdate} results={gameResults} />\n        )}\n      </div>\n      <footer className={classes.footer}>\n        Created by <a href=\"https://www.kazyamada.com/\">Kaz Yamada</a> |{\" \"}\n        <a href=\"https://github.com/kaz-yamada/Card-Match-Game\">Source</a>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \n\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}